SETUP FUNCTION
	;THIS FUNCTION ENABLES PORT E, MARKS IT AS OUTPUT, CONFIGURES SOME GPIO
	;THEN FINALLY IT CALLS LCD_INIT (HINT, USE THIS SETUP FUNCTION DIRECTLY IN THE MAIN)
	PUSH {R0-R12, LR}
	
	
	
	  LDR R0, =RCC_APB2ENR         ; Address of RCC_APB2ENR register
    LDR R1, [R0]                 ; Read the current value of RCC_APB2ENR
	MOV R2, #1
    ORR R1, R1, R2, LSL #1        ; Set bit 2 to enable GPIOA clock
    STR R1, [R0]                 ; Write the updated value back to RCC_APB2ENR
    
	LDR R0, =AFIO_MAPR
	LDR R1, [R0]
	MOV R2, #1
	LSL R2, #25
	STR R2, [R0]
	
	
	
	

	  LDR R0, =RCC_APB2ENR         ; Address of RCC_APB2ENR register
    LDR R1, [R0]                 ; Read the current value of RCC_APB2ENR
	MOV R2, #1
    ORR R1, R1, R2, LSL #2        ; Set bit 2 to enable GPIOA clock
    STR R1, [R0]                 ; Write the updated value back to RCC_APB2ENR
    
    ; Configure PORT A AS OUTPUT (LOWER 8 PINS)
    LDR R0, =GPIOA_CRL     
    MOV R1, #0x33333333     ;ALL 8 LOWER PINS OF PORT A AS OUTPUT WITH MAX SPEED OF 50 MHZ
    STR R1, [R0]

    ; Configure PORT A AS INPUT (HIGHER 8 PINS)
    LDR R0, =GPIOA_CRH           ; Address of GPIOC_CRH register
    MOV R1, #0x88888888    ;ALL 8 HIGHER PINS OF PORT A AS INPUT WITH MAX SPEED OF 50 MHZ
    STR R1, [R0]                 ; Write the updated value back to GPIOC_CRH
	
	  LDR R0, =GPIOA_ODR     
    LDR R1, [R0]                 ; Read the current value of GPIOC_CRH
	MOV R2,#0xffffffff
    STRH R2, [R0]



    ; Enable GPIOC clock
    LDR R0, =RCC_APB2ENR         ; Address of RCC_APB2ENR register
    LDR R1, [R0]                 ; Read the current value of RCC_APB2ENR
	MOV R2, #1
    ORR R1, R1, R2, LSL #4        ; Set bit 4 to enable GPIOC clock
    STR R1, [R0]                 ; Write the updated value back to RCC_APB2ENR
    
    ; Configure PC13 as output push-pull 
    LDR R0, =GPIOC_CRH           ; Address of GPIOC_CRH register
    MOV R1, #0x88888888      ; Set mode bits for pin 13 (output mode, max speed 50 MHz)
    STR R1, [R0]                 ; Write the updated value back to GPIOC_CRH

;    ; Configure PC13 as output push-pull 
;    LDR R0, =GPIOC_CRL           ; Address of GPIOC_CRH register
;    MOV R1, #0x33333333      ; Set mode bits for pin 13 (output mode, max speed 50 MHz)
;    STR R1, [R0]   
	
	 LDR R0, =GPIOC_ODR     
    MOV R1, #0xFFFFFFFF
    STR R1, [R0]


    ; Enable GPIOB clock
    LDR R0, =RCC_APB2ENR         ; Address of RCC_APB2ENR register
    LDR R1, [R0]                 ; Read the current value of RCC_APB2ENR
	MOV R2, #1
    ORR R1, R1, R2, LSL #3        ; Set bit 3 to enable GPIOB clock
    STR R1, [R0]                 ; Write the updated value back to RCC_APB2ENR
    
    
    LDR R0, =GPIOB_CRL           ; Address of GPIOC_CRL register
    MOV R1, #0x00008333      ; Set mode bits for pin 13 (output mode, max speed 50 MHz)
	ORR R1, #0x00880000
	ORR R1, #0x83000000
    STR R1, [R0]                 ; Write the updated value back to GPIOC_CRH


    LDR R0, =GPIOB_CRH           ; Address of GPIOC_CRL register
    MOV R1, #0x00003333      ; Set mode bits for pin 13 (output mode, max speed 50 MHz)
	ORR R1, #0x00330000
	ORR R1, #0x33000000
    STR R1, [R0] 
	
	 LDR R0, =GPIOB_ODR     
    MOV R1, #0xFFFF                ; Read the current value of GPIOC_CRH
    STR R1, [R0]


	BL LCD_INIT

	POP {R0-R12, PC}
;#####################################################################################################################################################################

   ENDFUNC




    B SKIPPED10
	LTORG
SKIPPED10
; HELPER DELAYS IN THE SYSTEM, YOU CAN USE THEM DIRECTLY


;##########################################################################################################################################
delay_1_second FUNCTION
	;this function just delays for 1 second
	PUSH {R8, LR}
	LDR r8, =INTERVAL
delay_loop
	SUBS r8, #1
	CMP r8, #0
	BGE delay_loop
	POP {R8, PC}
;##########################################################################################################################################
  ENDFUNC



;##########################################################################################################################################
delay_half_second FUNCTION
	;this function just delays for half a second
	PUSH {R8, LR}
	LDR r8, =INTERVAL
delay_loop1
	SUBS r8, #2
	CMP r8, #0
	BGE delay_loop1

	POP {R8, PC}
;##########################################################################################################################################
  ENDFUNC

;##########################################################################################################################################
delay_milli_second FUNCTION
	;this function just delays for a millisecond
	PUSH {R8, LR}
	LDR r8, =INTERVAL
delay_loop2
	SUBS r8, #1000
	CMP r8, #0
	BGE delay_loop2

	POP {R8, PC}
;##########################################################################################################################################
  ENDFUNC


;##########################################################################################################################################
delay_10_milli_second FUNCTION
	;this function just delays for 10 millisecondS
	PUSH {R8, LR}
	LDR r8, =INTERVAL
delay_loop3
	SUBS r8, #100
	CMP r8, #0
	BGE delay_loop3

	POP {R8, PC}
;##########################################################################################################################################

  ENDFUNC
